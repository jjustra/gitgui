#!/usr/bin/env python

# git front end for fast and easy usage

# alt+i ignore selected files
# alt+c commit (stage all not-ignored files)
# alt+p push (does auto-commit)

try:
	from tkinter import *
except ImportError:
	# Retro for python 2
	from Tkinter import *
from subprocess import Popen,PIPE
from os.path import realpath, basename


all_l = []
ign_l = []


def scan():
	global all_l

	log('statusing ... ',1)

	all_l = []
	so = Popen(['git','status','--short'],stdout=PIPE).communicate()[0]

	for ln in so.split(b'\n'):
		ln = ln.decode().strip()
		if not ln: continue

		m,fn = ln.split(' ',1)
		if m == '??': m = '?'
		all_l.append((m,fn))

	log('done\n',1)

def list():
	global all_l,ign_l,fil_l

	i = 0

	# get selected index
	s = fil_l.get(ACTIVE)
	if s:
		i = fil_l.get(0,END).index(s)

	# refresh
	fil_l.delete(0,END)
	for t in all_l:
		m,fn = t
		if fn in ign_l: m = 'I'
		fil_l.insert(END,'%s %s'%(m,fn))

	fil_l.selection_clear(0,END)
	fil_l.see(i)
	fil_l.activate(i)
	fil_l.selection_set(i)
	fil_l.selection_anchor(i)

def log(s,add=0):
	global log_t, tk

	if not add:
		log_t.delete(1.0,END)

	log_t.insert(END,s)
	tk.update_idletasks()

def quit(e=0):
	tk.destroy()

def do_ign(e=0):
	global fil_l,ign_l

	# get selected filename
	fn = fil_l.get(ACTIVE).split(' ',1)[1]

	# add or remove - ignore list
	if fn not in ign_l:
		ign_l.append(fn)
		log('ignored : '+fn+'\n')
	else:
		ign_l.pop(ign_l.index(fn))
		log('unignored : '+fn+'\n')

	list()

def do_com(e=0,check_msg=0):
	global ign_l,com_e

	# workflow sugar
	if com_e.focus_get() != com_e:
		if not check_msg or not com_e.get():
			com_e.focus()
			return

	# rescan - just in case
	scan()
	list()

	log('commiting ... ')

	l = []

	# get commit message
	msg = com_e.get()
	if not msg: return log('missing commit message\n',1)

	# filter ignored files
	for t in all_l:
		m,fn = t
		if fn not in ign_l:
			l.append(fn)

	if l:
		# stage files
		so = Popen(['git','add']+l,stdout=PIPE).communicate()[0]
		log(so,1)

	so = Popen(['git','commit','-m',msg],stdout=PIPE).communicate()[0]
#	print l,msg
	log(so,1)
	com_e.delete(0,END)

	scan()
	list()

def do_psh(e=0):
	# clear log
	log('')

	# do commit (only if commit msg not empty)
	do_com(0,1)

	# rescan - just in case
	scan()
	list()

	# push
	log('pushing ... ', 1)
	so,se = Popen(['git','push'],stdout=PIPE,stderr=PIPE).communicate()
	log(so,1)
	log(se,1)

def do_up(e=0):
	global fil_l
	fil_l.focus()
def do_down(e=0):
	global fil_l
	fil_l.focus()

def do_re(e=0):
	scan()
	list()

tk = Tk()
repo_name = basename(realpath('.'))
tk.title('['+repo_name + '] gitgui 0.0.7 by J.Justra 11.7.2022')


tk.bind('<Escape>',quit)
tk.bind('<Alt-i>',do_ign)
tk.bind('<Alt-c>',do_com)
tk.bind('<Alt-p>',do_psh)
tk.bind('<Up>',do_up)
tk.bind('<Down>',do_down)
tk.bind('<F5>',do_re)

fil_l=Listbox(tk)
ign_b = Button(tk,text='Ignore (Alt+i)',command=do_ign)
com_e = Entry(tk)
com_b = Button(tk,text='Commit (Alt+c)',command=do_com)
psh_b = Button(tk,text='Push (Alt+p)',command=do_psh)

log_t=Text(tk,width=40,height=10)


fil_l.grid(sticky='NEWS')
ign_b.grid(sticky='NEWS')
com_e.grid(sticky='NEWS')
com_b.grid(sticky='NEWS')
psh_b.grid(sticky='NEWS')
log_t.grid(sticky='NEWS')

scan()
list()
log('ready\nF5 for refresh')
com_e.focus_force()

tk.mainloop()
